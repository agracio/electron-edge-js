name: Pipeline Segment - test electron-edge-js
on:
  workflow_call:
    inputs:
      os:
        description: 'runs-on'
        required: true
        default: 'windows-2025'
        type: string
      electron:
        description: 'Electron version'
        required: true
        type: string
      version:
        description: 'Electron major version'
        required: true
        type: string
      environment:
        description: 'environment'
        required: false
        default: 'test electron-edge-js'
        type: string
      platform:
        description: 'OS short name'
        required: true
        type: string
      name:
        description: 'short name'
        required: true
        type: string

jobs:
  test-build:
    runs-on: ${{ inputs.os }}
    environment: ${{ inputs.environment }}
    name: ${{ inputs.name }}-electron-${{ inputs.electron }}
    timeout-minutes: 20
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release folder
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            try {
              const fs = require('fs')
              fs.rmdirSync(`lib/native/${process.platform}/${process.arch}/${{ inputs.version }}`, { recursive: true });
              fs.mkdirSync(`lib/native/${process.platform}/${process.arch}/${{ inputs.version }}`, { recursive: true });
            } catch(err) {
              core.error("Error creating release directory")
              core.setFailed(err)
            }

      - name: Download artifacts
        if: runner.os == 'Windows'
        uses: actions/download-artifact@v4
        with:
          path: release
          pattern: win32-electron-edge-js-*-${{ inputs.version }}*

      - name: Download artifacts
        if: runner.os == 'macOS'
        uses: actions/download-artifact@v4
        with:
          path: release
          pattern: darwin-electron-edge-js-*-${{ inputs.version }}*
       
      - name: List artifacts
        shell: bash
        run: ls -R release

      - name: Copy artifacts
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            try {
              const fs = require('fs')
              fs.copyFileSync(`release/${process.platform}-electron-edge-js-${process.arch}-${{ inputs.version }}/${process.platform}/${{ runner.arch }}/${{ inputs.version }}/edge_coreclr.node`, `lib/native/${process.platform}/${process.arch}/${{ inputs.version }}/edge_coreclr.node`);
              fs.copyFileSync(`release/${process.platform}-electron-edge-js-${process.arch}-${{ inputs.version }}/${process.platform}/${{ runner.arch }}/${{ inputs.version }}/edge_nativeclr.node`, `lib/native/${process.platform}/${process.arch}/${{ inputs.version }}/edge_nativeclr.node`);
              if(process.platform == 'darwin'){
                fs.copyFileSync(`release/${process.platform}-electron-edge-js-${process.arch}-${{ inputs.version }}/${process.platform}/${{ runner.arch }}/${{ inputs.version }}/MonoEmbedding.exe`, `lib/native/${process.platform}/${process.arch}/${{ inputs.version }}/MonoEmbedding.exe`);
              }
            } catch(err) {
              core.error("Error copying artifacts")
              core.setFailed(err)
            }

      - name: Setup env
        uses: ./.github/actions/setup-env
        with:
          electron: ${{ inputs.electron }}
          os: ${{ inputs.os }}
          replace-version: true

      - name: Check edge-js Windows pre-built files
        if:  runner.os == 'Windows'
        uses: andstor/file-existence-action@v3
        with:
          files: "lib/native/win32/${{ runner.arch }}/${{ inputs.version }}/edge_coreclr.node, lib/native/win32/${{ runner.arch }}/${{ inputs.version }}/edge_nativeclr.node"
          fail: true
          ignore_case: true

      - name: Check edge-js macOS pre-built files
        if:  runner.os == 'macOS'
        uses: andstor/file-existence-action@v3
        with:
          files: "lib/native/darwin/${{ runner.arch }}/${{ inputs.version }}/edge_coreclr.node, lib/native/darwin/${{ runner.arch }}/${{ inputs.version }}/edge_nativeclr.node"
          fail: true
          ignore_case: true

      - name: Run .NET 4.5/Mono tests
        shell: bash
        run: node tools/test.js CI

      - name: "Run .net core tests"
        shell: bash
        run: node tools/test.js CI
        env:
          EDGE_USE_CORECLR: 1
        
      - name: Test report
        uses: ./.github/actions/create-test-report
        with:
          electron: ${{ inputs.electron }}
          os: ${{ inputs.os }}
          upload: 'false'
          name: 'build-tests'

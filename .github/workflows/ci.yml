name: CI

on: 
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - 'samples/*'
      - 'stress/*'
      - 'performance/*'
      - '.github/FUNDING.YML'
      - '.github/workflows/ci-old.yml'
      - '.github/workflows/build.yml'
      - '.github/workflows/build*.yml'
      - '.github/actions/test-build/action.yml'
      - '.github/actions/build*/*.*'
      - '.github/actions/build/*.*'
      - '**/*.md'
      - '**/*.d.ts'
      - '**/*.bat'
      - '.travis.yml'
      - 'Dockerfile'
      - '.gitconfig'
      - '.gitignore'
      - 'appveyor*.*'
      - 'LICENSE*'
      - '.idea/**'
      - '.vscode/**'
      - '*.bat'
      - '*.nuspec'
      - 'tools/nuget/*'
      - '.npmignore'
      - 'test/config.json'
      - 'test/double'
      - '.circleci'
      - '.circleci/*'
      - 'README.md'
      - '*.sln'
      - '*.vcxproj'
      - 'tools/build.js'
  push:
    branches-ignore:
      - 'circleci'
    paths-ignore:
      - 'samples/*'
      - 'stress/*'
      - 'performance/*'
      - '.github/FUNDING.YML'
      - '.github/workflows/ci-old.yml'
      - '.github/workflows/build.yml'
      - '.github/workflows/build*.yml'
      - '.github/actions/test-build/action.yml'
      - '.github/actions/build*/*.*'
      - '.github/actions/build/*.*'
      - '**/*.md'
      - '**/*.d.ts'
      - '**/*.bat'
      - '.travis.yml'
      - 'Dockerfile'
      - '.gitconfig'
      - '.gitignore'
      - 'appveyor*.*'
      - 'LICENSE*'
      - '.idea/**'
      - '.vscode/**'
      - '*.bat'
      - '*.nuspec'
      - 'tools/nuget/*'
      - '.npmignore'
      - 'test/config.json'
      - 'test/double'
      - '.circleci'
      - '.circleci/*'
      - 'README.md'
      - '*.sln'
      - '*.vcxproj'
      - 'tools/build.js'

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true # required to setup CSC
  DOTNET_CLI_TELEMETRY_OPTOUT: 1 
  DOTNET_NOLOGO: 1 

jobs:
  electron-versions:
    runs-on: macos-latest
    outputs:
      matrix: ${{ steps.electron-versions.outputs.matrix }}

    name: electron-versions
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: package-lock.json
    
      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package.json') }}

      - name: npm install
        shell: bash
        run: npm i
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1

      - name: Electron versions
        shell: bash
        id: electron-versions
        run: |
          node tools/getVersion.js
          echo "matrix=$(cat electron-versions.txt)" >> $GITHUB_OUTPUT

  test:
    strategy:
      matrix:  ${{ fromJSON(needs.electron-versions.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    needs: electron-versions
        
    name: test-${{ matrix.os }}-v${{ matrix.electron }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/setup-env
        with:
          electron: ${{ matrix.electron }}
          os: ${{ matrix.os }}
          replace-version: true

      - if: runner.os == 'Linux'
        name: Check electron-edge-js build file
        id: check_build
        uses: andstor/file-existence-action@v3
        with:
          files: "build/Release/edge_coreclr.node"
          fail: true
          ignore_case: true
  
      - if: runner.os == 'macOS' || runner.os == 'Windows'
        name: Run .NET 4.5/Mono tests
        run: node tools/test.js CI
        timeout-minutes: 10

      - if: runner.os == 'macOS' || runner.os == 'Windows'
        name: "Run .net core tests"
        run: node tools/test.js CI
        timeout-minutes: 10
        env:
          EDGE_USE_CORECLR: 1

      # - if: runner.os == 'Linux'
      #   name: Run Mono tests
      #   timeout-minutes: 10
      #   run: |
      #     export DISPLAY=:99
      #     echo "DISPLAY=:99" >> $GITHUB_ENV
      #     Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      #     sleep 3
      #     node tools/test.js CI

      - if: runner.os == 'Linux'
        name: "Run .net core tests Linux"
        timeout-minutes: 10
        run: |
          export DISPLAY=:99
          echo "DISPLAY=:99" >> $GITHUB_ENV
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 3
          node tools/test.js CI
        env:
          EDGE_USE_CORECLR: 1

      - name: Test report
        uses: ./.github/actions/create-test-report
        with:
          electron: ${{ matrix.electron }}
          os: ${{ matrix.os }}



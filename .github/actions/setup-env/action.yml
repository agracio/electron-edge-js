name: 'Setup environment'
description: 'Sets up environment'
inputs:
  node:
    description: 'Node.js version'
    required: false
    default: '22'
  os:
    description: 'runs-on'
    required: false
    default: 'windows-2025'
  electron:
    description: 'Electron version'
    required: true
  replace-version:
    description: 'Replace electron version?'
    required: false
    default: 'false'
  arch:
    description: 'Architecture'
    required: false
    default: ''

runs:
  using: "composite"
  steps:

    - name: Setup NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node }}
        architecture: ${{ inputs.arch }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Read package.json
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          try {
            const fs = require('fs')
            const jsonString = fs.readFileSync('package.json')
            var json = JSON.parse(jsonString);
            core.exportVariable('json_electron_version', json.devDependencies.electron.toString())
          } catch(err) {
            core.error("Error while reading or parsing package.json")
            core.setFailed(err)
          }

    - name: setup electron version
      shell: bash
      if: ${{ inputs.replace-version == 'true' }}
      run: |
        sed -i -e 's/\${{ env.json_electron_version}}/=${{ inputs.electron }}/g' package.json

    - name: Cache node-gyp Linux
      if: runner.os == 'Linux'
      uses: actions/cache@v4
      env:
        cache-name: cache-node-gyp
      with:
        path: ~/.cache/node-gyp
        key: 'node-gyp-${{ runner.os }}-${{ runner.arch }}-${{ inputs.electron}}'

    - name: Cache node modules
      id: cache-nodemodules
      uses: actions/cache@v4
      env:
        cache-name: cache-node-modules
      with:
        path: node_modules
        key: node-modules-${{ inputs.os }}-${{ inputs.electron }}-${{ hashFiles('package-lock.json') }}
        
    - name: Cache NuGet
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-${{ inputs.os }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          nuget-${{ inputs.os }}-

    - name: Setup dotnet
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x' # SDK Version to use; x will use the latest version of the 8.0 channel
        
    - name: Setup Mono
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install mono --overwrite
        brew reinstall pkg-config

    # - uses: actions/checkout@v4
    # - uses: awalsh128/cache-apt-pkgs-action@latest
    #   name: Setup Mono
    #   if: runner.os == 'Linux'
    #   with:
    #     packages: mono-complete pkg-config libglib2.0-dev
    #     version: 1.0

    - name: Versions
      shell: bash
      run: |
        node -v && npm -v && dotnet --version && node -p process.platform && node -p process.arch

    - name: npm install
      shell: bash
      run: npm i --no-audit
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_NOLOGO: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1